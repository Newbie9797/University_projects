{
 "cells": [
  {
   "attachments": {
    "R-S-Inventory-Policy.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulating an inventory system\n",
    "\n",
    "In this notebook we simulate an inventory system with stochastic demand. We perform the following steps:\n",
    "\n",
    "* Investigate historic demand and assume a probability distribution that fits the data\n",
    "* Use that probability distribution to generate demands for the simulation horizon\n",
    "* Develop a simulation program for inventory system with a (*R* = 1, *S*) policy: a periodic inventory review policy in which we order up to the order-up-to level (OUL) *S* every *R* units of time (see picture below). The inventory level should cover the demand during the review period *R* and the lead time. Please note that in this case, inventory holdings costs then to be higher than for continuous review inventory systems.\n",
    "* Optimize the parameter *S*.\n",
    "* Simulate an (*R*, *s*, *S*) policy (picture given in part 5). In this policy, we order up to our OUL *S* only when the inventory level is lower than our re-order point (ROP) *s*.\n",
    "\n",
    "![R-S-Inventory-Policy.png](attachment:R-S-Inventory-Policy.png)\n",
    "Source: https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.researchgate.net%2Fprofile%2FAbm-Abdul-Malek%2Fpublication%2F312286657%2Ffigure%2Ffig1%2FAS%3A449935045861376%401484284282406%2FR-S-Inventory-Policy.png&imgrefurl=https%3A%2F%2Fwww.researchgate.net%2Ffigure%2FR-S-Inventory-Policy_fig1_312286657&tbnid=XMNhdGPTthLpdM&vet=12ahUKEwjayPOUvfnzAhXSqqQKHVXbBuwQMygAegUIARCYAQ..i&docid=WT0NsnDDkWq0JM&w=509&h=274&q=R%2C%20s%2C%20S%20inventory&ved=2ahUKEwjayPOUvfnzAhXSqqQKHVXbBuwQMygAegUIARCYAQ\n",
    "\n",
    "## Part 1: Investigate historic demand and assume a probability distribution that fits the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Weekly_demand\n",
      "0     126.922249\n",
      "1     100.919197\n",
      "2     112.451675\n",
      "3     162.802025\n",
      "4      92.299140\n",
      "Weekly_demand    float64\n",
      "dtype: object\n",
      "Range of demand values: ( 58.34177607969135 , 162.80202451940553 )\n"
     ]
    }
   ],
   "source": [
    "#Import Pandas, read in the demand data, explore data\n",
    "import pandas as pd\n",
    "demand_data = pd.read_excel('./DemandData.xls', header = None, names = ['Weekly_demand'])\n",
    "print(demand_data.head())\n",
    "print(demand_data.dtypes)\n",
    "print(\"Range of demand values: (\", min(demand_data['Weekly_demand']), \",\", max(demand_data['Weekly_demand']), \")\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11fcc1c10>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "demand_data['Weekly_demand'].plot.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We assume that the above distribution of demand data follows a normal distribution to simplify further analysis. We can thus generate further demand data from a normal distribution. We only need to calculate the mean and SD of the actual demand data to be able to do this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean demand: 102.54604117431717 \n",
      "Standard deviation of demand: 21.21482595693871\n"
     ]
    }
   ],
   "source": [
    "m = demand_data['Weekly_demand'].mean()\n",
    "sd = demand_data['Weekly_demand'].std()\n",
    "print(\"Mean demand:\", m, \"\\nStandard deviation of demand:\", sd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: How to use a normal distribution to generate demands for the simulation horizon\n",
    "\n",
    "As an example, we now generate a full year of demand data to be added to the actual demand data we have, since one year of data is too exposed to the variance of a single year. Of course, we want our generated demand data to be non-negative, so we check for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No non-negative demands observed\n",
      "[102.83199057  78.89478461  92.52757298  65.51571925 134.94820743\n",
      "  82.98455885 155.40615234 137.01009774  99.41191878 101.10410811\n",
      "  76.81634894 122.90592747 114.05997693 117.11452613 112.61545272\n",
      "  94.02567814  88.62880873  79.82083132 122.37632255 109.36841508\n",
      " 127.07864169 127.74160824  99.77498253  77.57715346  69.92649899\n",
      " 125.17634262 133.23797314  87.68706593 117.22806911  86.70775745\n",
      " 112.12719567 105.22971995 104.08758983 118.22804288  87.57098167\n",
      " 116.89842049  68.71526446 117.95545715 106.12088111  76.02582472\n",
      " 115.21486812  95.66306011  93.98156423 134.1631933   94.74853161\n",
      "  97.62789813  67.74879213  96.84351406  95.04268368  61.80939915\n",
      " 112.59297342 137.19826212]\n",
      "Any non-negative demands: False\n",
      "Mean of new demand data: 103.00187711146336\n",
      "Standard deviation of new demand data: 21.379100705893688\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "generated_demand_data = np.random.normal(loc = m, scale = sd, size = 52)\n",
    "if any(generated_demand_data < 0) == True:\n",
    "    generated_demand_data[generated_demand_data < 0] = 0\n",
    "    print(generated_demand_data)\n",
    "else:\n",
    "    print(\"No non-negative demands observed\")\n",
    "    print(generated_demand_data)\n",
    "\n",
    "print(\"Any non-negative demands:\", any(generated_demand_data < 0))\n",
    "print(\"Mean of new demand data:\", generated_demand_data.mean())\n",
    "print(\"Standard deviation of new demand data:\", generated_demand_data.std())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Develop a simulation program for inventory system with a (*R* = 1, *S*) policy\n",
    "\n",
    "The following assumptions about inventory dynamics are made:\n",
    "* Demand is stationary and independent normally distributed\n",
    "* Lost sales model: demand not met from stock is lost\n",
    "* Order lead time is 1 week\n",
    "* Length of review period *R* is 1, so 1 week\n",
    "* OUL level *S* is set to 256, equivalent to a 97.5% service level.\n",
    "\n",
    "The following assumptions about cost structure are made:\n",
    "* Unit holding costs are incurred for each item in stock at the start of a period (also for products received at the start of the period)\n",
    "* Unit shortage costs are incurred for products that cannot be fulfilled from stock directly\n",
    "* There is a fixed order cost per order"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the cell below, we create a function through which we can simulate the (R, S) policy. The following variables are declared:\n",
    "\n",
    "*N* = number of runs\n",
    "\n",
    "*T* = number of weeks\n",
    "\n",
    "*S* = OUL\n",
    "\n",
    "*k* = fixed order cost\n",
    "\n",
    "*h* = unit holding cost per week\n",
    "\n",
    "*u* = unit shortage cost\n",
    "\n",
    "*alpha* = average fraction of weeks in which we are **not** out-of-stock, so in which we had enough inventory on-hand to fulfill all demand throughout the week (service level in fraction of weeks)\n",
    "\n",
    "*beta* = average fraction of demand met directly from stock (service level in fraction of demand)\n",
    "\n",
    "*avgcost* = average cost for a simulation run (1 year)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we create a function of the cell above so we can use it to run simulations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average cost per week over 1 runs: 41.73653846153846\n",
      "\n",
      "Average fraction of weeks not out of stock over 1 runs: 0.9230769230769231\n",
      "\n",
      "Average fraction of demand met from stock over 1 runs: 0.9806042521447221\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([0.9230769230769231], [0.9806042521447221], 41.73653846153846)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def SIMRS(N, T, S, k, h, u):\n",
    "\n",
    "    alpha = []\n",
    "    beta = []\n",
    "    avgcost = []\n",
    "\n",
    "    for run in range(N):\n",
    "        I = np.full(T+1, 0) #Create empty array for on-hand inventory\n",
    "        Q = np.full(T, 0) #Create empty array for order quantity values\n",
    "        d = np.full(T, 0) #Create empty array for demand values\n",
    "        Iend = np.full(T, 0) #Create empty array for end inventory\n",
    "        #Each run starts with zero stock, so I[0] must always be 0\n",
    "        NStockout = 0\n",
    "        NShort = 0\n",
    "        TC = 0 #initialize number of stockouts, units short, and total cost\n",
    "\n",
    "        for week in range(T):\n",
    "            Q[week] = S - I[week] #Order up to OUL level\n",
    "            d[week] = max(0, np.random.normal(loc = m, scale = sd, size = 1)) #Generate random weekly demand\n",
    "            Iend[week] = max(0, I[week] - d[week]) #Calculate inventory at end of week\n",
    "            if week <= T:\n",
    "                I[week+1] = Iend[week] + Q[week] #Orders delivered at end of the week\n",
    "                if Iend[week] == 0: #Keep track of number of stockouts\n",
    "                    NStockout = NStockout + 1\n",
    "                if d[week] > I[week]: #Keep track of nr of units short\n",
    "                    shortage = d[week] - I[week]\n",
    "                else:\n",
    "                    shortage = 0\n",
    "                NShort = NShort + shortage\n",
    "                if Q[week] > 0:\n",
    "                    cost = k + h*I[week] + u*shortage\n",
    "                else:\n",
    "                    cost = h*I[week] + u*shortage\n",
    "                TC = TC + cost\n",
    "            else:\n",
    "                break\n",
    "\n",
    "        #Compute summary statistics for a run\n",
    "        alpha.append(1-NStockout/T)\n",
    "        beta.append(1-NShort/sum(d))\n",
    "        avgcost.append(TC/T)\n",
    "    \n",
    "    avgalpha = np.mean(alpha)\n",
    "    avgbeta = np.mean(beta)\n",
    "    avgcost = np.mean(avgcost)\n",
    "    print(\"Average cost per week over\", N, \"runs:\", np.mean(avgcost))\n",
    "    print(\"\\nAverage fraction of weeks not out of stock over\", N, \"runs:\", np.mean(alpha))\n",
    "    print(\"\\nAverage fraction of demand met from stock over\", N, \"runs:\", np.mean(beta))\n",
    "    \n",
    "    return(alpha, beta, avgcost)\n",
    "\n",
    "SIMRS(1, 52, 256, 25, 0.1, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run simulations for OUL of 100, 200, and 400 and see what happens to the average cost, average fraction of weeks not out-of-stock, and the average fraction of demand met from stock (service level)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results for OUL of 100\n",
      "\n",
      "Average cost per week over 1 runs: 86.17307692307692\n",
      "\n",
      "Average fraction of weeks not out of stock over 1 runs: 0.05769230769230771\n",
      "\n",
      "Average fraction of demand met from stock over 1 runs: 0.46027742749054223\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([0.05769230769230771], [0.46027742749054223], 86.17307692307692)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Results for OUL of 100\\n\")\n",
    "SIMRS(1, 52, 100, 25, 0.1, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results for OUL of 200\n",
      "\n",
      "Average cost per week over 1 runs: 46.42307692307692\n",
      "\n",
      "Average fraction of weeks not out of stock over 1 runs: 0.4807692307692307\n",
      "\n",
      "Average fraction of demand met from stock over 1 runs: 0.8914503539662371\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([0.4807692307692307], [0.8914503539662371], 46.42307692307692)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Results for OUL of 200\\n\")\n",
    "SIMRS(1, 52, 200, 25, 0.1, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results for OUL of 400\n",
      "\n",
      "Average cost per week over 1 runs: 55.67884615384617\n",
      "\n",
      "Average fraction of weeks not out of stock over 1 runs: 0.9807692307692307\n",
      "\n",
      "Average fraction of demand met from stock over 1 runs: 0.982999622213827\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([0.9807692307692307], [0.982999622213827], 55.67884615384617)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Results for OUL of 400\\n\")\n",
    "SIMRS(1, 52, 400, 25, 0.1, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What we see from the simulations above is that by setting the OUL higher, we increase the fraction of weeks we can fulfill demand from stock as well as the fraction of demand fulfilled directly from stock. Comparing the costs of OUL = 100 and OUL = 200, we see that the costs decrease, so setting OUL = 200 is more beneficial. However, even though OUL = 400 results in better alpha and beta values, our costs increase as well. So, we need to find the best value of S for our total costs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 4: Optimize the value of our OUL *S*\n",
    "\n",
    "First, we perform an exploratory search for the best value of *S* by incrementing the value of *S* by 10 each time. Later, we perform a search towards the optimal value when we have an idea of the best range of *S*. We perform this search by searching through values starting from 10 up to the sum of annual demand from our actual demand data (in increments of 10)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Output of this cell was very large, and thus cleared for presentation purposes\n",
    "annual_demand = int(round(sum(demand_data['Weekly_demand']), -1)) + 10\n",
    "alpha_values = []\n",
    "beta_values = []\n",
    "avg_cost_values = []\n",
    "for i in range(10, annual_demand, 10):\n",
    "    x = SIMRS(1, 52, i, 25, 0.1, 1)\n",
    "    alpha_values.append(x[0])\n",
    "    beta_values.append(x[1])\n",
    "    avg_cost_values.append(x[2])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the average cost vs the order-up-to level S\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(range(10, annual_demand, 10), avg_cost_values)\n",
    "plt.title('Average cost vs. order-up-to level S')\n",
    "plt.xlabel('Order-up-to level S')\n",
    "plt.ylabel('Average cost over N runs')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see clearly that there is a cost minimum at lower levels of *S*. We refine our search to be between 150 and 400 and run the simulation again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Output of this cell was very large, and thus cleared for presentation purposes\n",
    "alpha_values = []\n",
    "beta_values = []\n",
    "avg_cost_values = []\n",
    "for i in range(10, 410, 10):\n",
    "    x = SIMRS(1, 52, i, 25, 0.1, 1)\n",
    "    alpha_values.append(x[0])\n",
    "    beta_values.append(x[1])\n",
    "    avg_cost_values.append(x[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(10, 410, 10), avg_cost_values)\n",
    "plt.title('Average cost vs. order-up-to level S')\n",
    "plt.xlabel('Order-up-to level S')\n",
    "plt.ylabel('Average cost over N runs')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Minimum costs seem to be achieved somewhere between *S* = 200 and *S* = 250. We run the simulation again, now for values between 200 and 250 with increments of 1 to find the optimal value.\n",
    "\n",
    "Note: our average costs per week seem to be robust for OUL level fluctuations between 200 and 250. This is good to see."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Output of this cell was very large, and thus cleared for presentation purposes\n",
    "alpha_values = []\n",
    "beta_values = []\n",
    "avg_cost_values = []\n",
    "for i in range(200, 251):\n",
    "    x = SIMRS(1, 52, i, 25, 0.1, 1)\n",
    "    alpha_values.append(x[0])\n",
    "    beta_values.append(x[1])\n",
    "    avg_cost_values.append(x[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(200, 251), avg_cost_values)\n",
    "plt.title('Average cost vs. order-up-to level S')\n",
    "plt.xlabel('Order-up-to level S')\n",
    "plt.ylabel('Average cost over N runs')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum cost: 40.23846153846154\n",
      "OUL S: 214\n",
      "Alpha at optimum: [0.8076923076923077]\n",
      "Beta at optimum: [0.9599836668027767]\n"
     ]
    }
   ],
   "source": [
    "#Find the minimum average cost value and its corresponding *S* value.\n",
    "minimum = min(avg_cost_values)\n",
    "print(\"Minimum cost:\", minimum)\n",
    "print(\"OUL S:\", avg_cost_values.index(minimum) + 200 + 1)\n",
    "print(\"Alpha at optimum:\", alpha_values[avg_cost_values.index(minimum)])\n",
    "print(\"Beta at optimum:\", beta_values[avg_cost_values.index(minimum)])\n",
    "\n"
   ]
  },
  {
   "attachments": {
    "R-s-S-inventory-system_Q320.jpeg": {
     "image/jpeg": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have found that the minimal weekly cost is 40.24 with an OUL of 214. Thus, to achieve minimal costs, we should have an OUL of 214. At this point, we have do **not** stock out roughly 80.8% of the weeks, and we can fulfill roughly 96.0% of demand directly from stock.\n",
    "\n",
    "## Part 5: Moving from (R = 1, S) to an (R = 1, s, S) policy\n",
    "\n",
    "We now update our simulation model to include a parameter *s*, which represents the re-order point (ROP). We will only order up to *S* if our inventory level is below *s* at the review period. The picture below visualizes this policy (notation may be different).\n",
    "\n",
    "![R-s-S-inventory-system_Q320.jpeg](attachment:R-s-S-inventory-system_Q320.jpeg)\n",
    "Source: https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.researchgate.net%2Ffigure%2FR-s-S-inventory-system_fig1_347397279&psig=AOvVaw38HM5kIgTJVb0msaQeEDT3&ust=1635935602361000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCKDU2Je9-fMCFQAAAAAdAAAAABAQ\n",
    "\n",
    "First, we define the function with which we simulate the (R, s, S) policy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average cost per week over 1 runs: 42.786538461538456\n",
      "\n",
      "Average fraction of weeks not out of stock over 1 runs: 0.9230769230769231\n",
      "\n",
      "Average fraction of demand met from stock over 1 runs: 0.9747832939322301\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([0.9230769230769231], [0.9747832939322301], 42.786538461538456)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def SIMRsS(N, T, S, s, k, h, u):\n",
    "\n",
    "    alpha = []\n",
    "    beta = []\n",
    "    avgcost = []\n",
    "\n",
    "    for run in range(N):\n",
    "        I = np.full(T+1, 0) #Create empty array for on-hand inventory\n",
    "        Q = np.full(T, 0) #Create empty array for order quantity values\n",
    "        d = np.full(T, 0) #Create empty array for demand values\n",
    "        Iend = np.full(T, 0) #Create empty array for end inventory\n",
    "        #Each run starts with zero stock, so I[0] must always be 0\n",
    "        NStockout = 0\n",
    "        NShort = 0\n",
    "        TC = 0 #initialize number of stockouts, units short, and total cost\n",
    "\n",
    "        for week in range(T):\n",
    "            if I[week] < s:\n",
    "                Q[week] = S - I[week] #Order up to OUL level in we are past our ROP\n",
    "            else:\n",
    "                Q[week] = 0\n",
    "            d[week] = max(0, np.random.normal(loc = m, scale = sd, size = 1)) #Generate random weekly demand\n",
    "            Iend[week] = max(0, I[week] - d[week]) #Calculate inventory at end of week\n",
    "            if week <= T:\n",
    "                I[week+1] = Iend[week] + Q[week] #Orders delivered at end of the week\n",
    "                if Iend[week] == 0: #Keep track of number of stockouts\n",
    "                    NStockout = NStockout + 1\n",
    "                if d[week] > I[week]: #Keep track of nr of units short\n",
    "                    shortage = d[week] - I[week]\n",
    "                else:\n",
    "                    shortage = 0\n",
    "                NShort = NShort + shortage\n",
    "                if Q[week] > 0:\n",
    "                    cost = k + h*I[week] + u*shortage\n",
    "                else:\n",
    "                    cost = h*I[week] + u*shortage\n",
    "                TC = TC + cost\n",
    "            else:\n",
    "                break\n",
    "\n",
    "        #Compute summary statistics for a run\n",
    "        alpha.append(1-NStockout/T)\n",
    "        beta.append(1-NShort/sum(d))\n",
    "        avgcost.append(TC/T)\n",
    "    \n",
    "    avgalpha = np.mean(alpha)\n",
    "    avgbeta = np.mean(beta)\n",
    "    avgcost = np.mean(avgcost)\n",
    "    print(\"Average cost per week over\", N, \"runs:\", np.mean(avgcost))\n",
    "    print(\"\\nAverage fraction of weeks not out of stock over\", N, \"runs:\", np.mean(alpha))\n",
    "    print(\"\\nAverage fraction of demand met from stock over\", N, \"runs:\", np.mean(beta))\n",
    "    \n",
    "    return(alpha, beta, avgcost)\n",
    "\n",
    "SIMRsS(1, 52, 256, 356, 25, 0.1, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we once again want to find the best value of *S*, but during these runs we also want to find the best value of *s*. We do so with increments of 10 again.\n",
    "\n",
    "We saw in our previous optimization of *S* that the costs increase linearly after *S* = ±400. So, we limit our values of *S* to 600 for this search, and our value of *s* to 600 as well. This means we have to run 3600 simulations instead of ±270.000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Output of this cell was very large, and thus cleared for presentation purposes\n",
    "best_cost = 999999999999999\n",
    "best_alpha = 0\n",
    "best_beta = 0\n",
    "best_s = 0\n",
    "best_S = 0\n",
    "for i in range(10, 610, 10):\n",
    "    for j in range(10, 610, 10):\n",
    "        x = SIMRsS(1, 52, i, j, 25, 0.1, 1)\n",
    "        if x[2] < best_cost:\n",
    "            best_cost = x[2]\n",
    "            best_alpha = x[0]\n",
    "            best_beta = x[1]\n",
    "            best_s = j\n",
    "            best_S = i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lowest avg. weekly cost: 32.675\n",
      "Corresponding best alpha: [0.8461538461538461]\n",
      "Corresponding best beta: [0.9628059356330699]\n",
      "Corresponding best s (ROP): 170\n",
      "Corresponding best S (OUL): 310\n"
     ]
    }
   ],
   "source": [
    "print(\"Lowest avg. weekly cost:\", best_cost)\n",
    "print(\"Corresponding best alpha:\", best_alpha)\n",
    "print(\"Corresponding best beta:\", best_beta)\n",
    "print(\"Corresponding best s (ROP):\", best_s)\n",
    "print(\"Corresponding best S (OUL):\", best_S)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We find that moving from the (R=1, S) policy to the (R=1, s, S) policy changes our performance in the following ways:\n",
    "\n",
    "* Average weekly cost decreases from around 40 to around 32: a 20% decrease.\n",
    "* Our fraction of weeks in which we are **not** out-of-stock increases from 80.8% to 84.6%.\n",
    "* Our fraction of demand met directly from stock increases from 96.0% to 96.3%.\n",
    "* Our OUL *S* increases from 214 to 310, and our ROP is 170 in the (R, s, S) policy\n",
    "\n",
    "Thus, we improve our performance in terms of cost and service levels.\n",
    "\n",
    "Note: it is possible to optimize *s* and *S* further, but we choose not to do so in this notebook."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
